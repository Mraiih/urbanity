#!/usr/bin/env ruby

require 'colorize'
require 'net/http'
require 'tty-progressbar'
require 'nhentai-api'
require 'optparse'
require 'cli/ui'

CLI::UI::StdoutRouter.enable

# CONSTANTS
DONE      = 'DONE'.colorize(:green)
ERROR     = 'ERROR'.colorize(:red)
FINISHED  = 'DOWNLOAD FINISHED'.colorize(:blue)

# FUNCTIONS
def initiate(doujinshi)
  increment = (100 / doujinshi.count_pages.to_f) / 100

  CLI::UI::Frame.open("#{doujinshi.id}", color: :green) do
    Dir.mkdir(doujinshi.id)
    CLI::UI::Progress.progress do |bar|
      doujinshi.pages.each_with_index { |page, index| download(doujinshi, page, index + 1, bar, increment) }
      bar.tick(set_percent: 100)
    end
  end
end

def download(doujinshi, page, index, bar, increment)
  client    = Net::HTTP.get_response(URI(page))
  extention = page.slice(page.length - 3..page.length)

  File.open("#{doujinshi.id}/#{index}.#{extention}", 'wb') { |file| file.puts client.body }
  bar.tick(percent: increment)
end

def put_message(message)
  puts message
  exit
end

# ARGUMENTS
options = {}
begin
  OptionParser.new do |opts|
    opts.banner = "Usage: urbanity [options] [id]"

    opts.on '-r', '--rename [name]', String, 'Define a folder name' do |value|
      options[:rename] = value
    end

    opts.on '-f', '--from [page]', Integer, 'Starting range' do |value|
      options[:from] = value
    end

    opts.on '-t', '--to [page]', Integer, 'Ending range' do |value|
      options[:to] = value
    end

    opts.on '-m', '--mirror [link]', String, 'Use a mirror' do |value|
      options[:mirror] = value
    end

    opts.on '-h', '--help', 'Show this help' do
      puts opts
      exit
    end
  end.parse!
rescue OptionParser::InvalidOption
  puts 'Warning: Invalid option'
  exit
end

# MULTIPLES DOUJINSHI
doujinshi_list = ARGV.map { |doujinshi| doujinshi if doujinshi.match(/\d+/) }

CLI::UI::Frame.open('Urbanity', color: :cyan) do
  doujinshi_list.each do |id|
    doujinshi = Doujinshi.new(id)
    unless doujinshi.exists?
      CLI::UI::Frame.open('ERROR', color: :red) do
        puts "This doujinshi does not exist: #{id}"
      end
      next
    end

    if File.exist?(id)
      CLI::UI::Frame.open('ERROR', color: :red) do
        puts "Folder #{id} already exist"
      end
    else
      initiate(doujinshi)
    end
  end
end
